#+TITLE: Emacs Configuration
#+AUTHOR: DaniÃ«l de Kok

* Introduction

This org-mode document stores my main Emacs configuration. I initially
used [[http://spacemacs.org][Spacemacs]] to get an Emacs that is as similar to vim as
possible. Spacemacs is awesome, but also quite slow and buggy. So I
decided to start from scratch. However, my Spacemacs origins still
show, since I culled some key bindings from Spacemacs.

** Tangling

To load the configuration, I use tangling of Emacs lisp fragments,
which are loaded from [[./init.el][init.el]]. Since loading using ~org-babel-load-file~
is slow, I use the [[http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/][untangling approach]] proposed by Holger Schurig.

* Package management

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* Appearance
** Cleanup

Emacs has some UI elements that I do not use and waste screen space,
in particular:

- The tool bar
- The scroll bar
- The menu bar (outside macOS)

Disable these UI elements:

#+BEGIN_SRC emacs-lisp
(when window-system
  (dolist (mode
	   '(tool-bar-mode
	     tooltip-mode
	     scroll-bar-mode
	     menu-bar-mode
	     blink-cursor-mode))
    (funcall mode 0)))
#+END_SRC

** Font

Set /Operator Mono/ as the main font. This font has the advantage
of supporting italic text.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (set-frame-font "Operator Mono 15"))
#+END_SRC

** Theme

The standard Emacs theme is blinding :).

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))
#+END_SRC

* Evil

Set up Evil. I swap ~:~ and ~;~ since I use ex more frequently :).

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-i-jump nil)
    (evil-mode 1))

  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init (which-key-mode)

    :config
    (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
    (define-key evil-motion-state-map (kbd ";") 'evil-ex)
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 0.05)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    (general-define-key
     :states '(normal motion emacs)
     :prefix "SPC"
     "b"  '(:ignore t :which-key "buffer")
     "bb" '(ivy-switch-buffer "switch buffer")
     "bd" '(kill-this-buffer "kill buffer")

     "f"  '(:ignore t :which-key "file")
     "fs" '(save-buffer)
     "fr" '(ivy-recentf "recent file")

     "m"  '(:ignore t :which-key "mode")

     "t"  '(:ignore t :which-key "toggle")
     "tf" '(toggle-frame-fullscreen :which-key "fullscreen")

     "wv" '(split-window-horizontally :which-key "split vertical")
     "ws" '(split-window-vertically :which-key "split horizontal")
     "wk" '(evil-window-up :which-key "up")
     "wj" '(evil-window-down :which-key "down")
     "wh" '(evil-window-left :which-key "left")
     "wl" '(evil-window-right :which-key "right")
     "wd" '(delete-window :which-key "delete")

     "q"  '(:ignore t :which-key "quit")
     "qq" '(save-buffers-kill-emacs :which-key "quit"))
    (general-define-key
     :states '(normal motion emacs)
     :prefix "SPC"
     :keymaps 'bibtex-mode-map
     "ms" '(bibtex-sort-buffer :which-key "sort buffer")))
#+END_SRC

* Ivy

Set up ivy for completion. Two major changes from the normal behavior are:

1. Use fuzzy matching.
2. Do not anchor the search (~^~).

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :init (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t
	  ivy-hight 20
	  ivy-count-format "(%d/%d) "
	  ivy-re-builders-alist '((t . ivy--regex-fuzzy))
	  ivy-initial-inputs-alist nil)
    :diminish ivy-mode)
#+END_SRC

Use the /flx/ algorithm to improve ranking in fuzzy search:

#+BEGIN_SRC emacs-lisp
  (use-package flx
    :ensure t)
#+END_SRC

Use counsel for replacing some common search commands. Also set up
some Spacemacs-like search commands. I am not sure yet whether I like
the shortcut for `counsel-unicode-char`. Does this really belong to
search-related commands?

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind*                           ; load counsel when pressed
    (("M-x"     . counsel-M-x)       ; M-x use counsel
     ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
     ("C-x C-r" . counsel-recentf)   ; search recently edited files
     ("C-c f"   . counsel-git)       ; search for files in git repo
     ("C-c s"   . counsel-git-grep)  ; search for regexp in git repo
     ("C-c /"   . counsel-rg)        ; search for regexp in git repo using ag
     ("C-c l"   . counsel-locate)    ; search for files or else using locate
     ("M-y"     . counsel-yank-pop))
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "SPC" '(counsel-M-x :which-key "M-x")
     "fo"  '(counsel-find-file :which-key "find file")
     "s"   '(:ignore t :which-key "search")
     "sc"  '(counsel-unicode-char :which-key "find character")
     "sg"  '(counsel-rg :which-key "rg git"))
    (:states '(normal motion emacs)
     :keymaps 'org-mode-map
     :prefix "SPC"
     "mg"  '(counsel-org-goto :which-key "goto")
     "m:"  '(counsel-org-tag :which-key "tag")))
#+END_SRC

Set up swiper for in-file search.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind*
    (("\C-s" . swiper))
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "ss" '(swiper :which-key "swiper")))
#+END_SRC

* Source management

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "g"  '(:ignore t :which-key "Git")
     "gs" 'magit-status)

    :config
    (use-package evil-magit
      :ensure t))
#+END_SRC

Add support for managing GitHub pull requests from magit status:

#+BEGIN_SRC emacs-lisp
  (use-package magit-gh-pulls
    :ensure t
    :after magit
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))

#+END_SRC

* org mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :general
    (:states '(normal motion emacs)
     :keymaps 'org-mode-map
     :prefix "SPC"
     "m"  '(:ignore t :which-key "Mode")
     "ma" '(org-agenda :which-key "Agenda")
     "mA" '(org-archive-subtree :which-key "Archive")
     "md" '(org-deadline :which-key "Deadline")
     "me" '(org-export-dispatch :which-key "Export")
     "ml"  '(org-open-at-point :which-key "open")
     "mP" '(org-set-property :which-key "Property")
     "ms" '(org-edit-special :which-key "edit special")
     ;"m:" '(org-set-tags :which-key "Tags")

     ;; insert
     "mia" '(org-attach :which-key "attach")
     "mif" '(org-footnote-new :which-key "footnote")
     "mil" '(org-insert-link :which-key "link")

     ;; tables
     "mt"  '(:ignore t :which-key "table")
     "mtdc" '(org-table-delete-column)
     "mtdr" '(org-table-kill-row)
     "mte" '(org-table-eval-formula)
     "mtE" '(org-table-export)
     "mth" '(org-table-previous-field)
     "mtH" '(org-table-move-column-left)
     "mtic" '(org-table-insert-column)
     "mtih" '(org-table-insert-hline)
     "mtiH" '(org-table-hline-and-move)
     "mtir" '(org-table-insert-row)
     "mtI" '(org-table-import)
     "mtj" '(org-table-next-row)
     "mtJ" '(org-table-move-row-down)
     "mtK" '(org-table-move-row-up)
     "mtl" '(org-table-next-field)
     "mtL" '(org-table-move-column-right)
     "mtn" '(org-table-create)
     "mtN" '(org-table-create-with-table.el)
     "mtr" '(org-table-recalculate)
     "mts" '(org-table-sort-lines)
     "mttf" '(org-table-toggle-formula-debugger)
     "mtto" '(org-table-toggle-coordinate-overlays)
     "mtw" '(org-table-wrap-region))

    (:states '(normal motion emacs)
     :prefix "SPC"

     ;; Global agenda mappings
     "ao#" '(org-agenda-list-stuck-projects)
     "ao/" '(org-occur-in-agenda-files)
     "aoa" '(org-agenda-list)
     "aoe" '(org-store-agenda-views)
     "aom" '(org-tags-view)
     "aoo" '(org-agenda)
     "aos" '(org-search-view)
     "aot" '(org-todo-list)

     ;; other
     "aoO" '(org-clock-out)
     "aoc" '(org-capture)
     "aol" '(org-store-link))

    (general-define-key
     :keymaps 'org-agenda-mode-map
     "h" 'evil-backward-char
     "l" 'evil-forward-char
     "j" 'evil-next-line
     "k" 'evil-previous-line)

    :config
    (defun my-beamer-bold (contents backend info)
      (when (eq backend 'beamer)
	(replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

    (add-hook 'org-mode-hook
	      (lambda ()
		(add-to-list 'write-file-functions 'delete-trailing-whitespace)
		(add-to-list 'org-export-filter-bold-functions 'my-beamer-bold)))


    (setq org-agenda-files '("~/git/org/")
	  org-attach-commit nil
	  org-directory "~/git/org/"
	  org-mobile-directory "~/Dropbox/Apps/MobileOrg"
	  org-mobile-inbox-for-pull (expand-file-name "flagged.org" org-directory)
	  org-preview-latex-default-process 'imagemagick
	  org-latex-pdf-process
	  '("pdflatex -interaction nonstopmode -output-directory %o %f"
	    "bibtex %b"
	    "pdflatex -interaction nonstopmode -output-directory %o %f"
	    "pdflatex -interaction nonstopmode -output-directory %o %f")
	  org-latex-table-scientific-notation "$%s\\times10^{%s}$"
	  org-capture-templates
	  '(("t" "Todo" entry (file+headline "~/git/org/tasks.org" "Tasks")
	     "* TODO %?\n  %i\n  %a")
	    ("j" "Journal" entry (file+datetree "~/git/org/journal.org")
	     "* %?\nEntered on %U\n  %i\n  %a"))
	  org-refile-targets '((nil :maxlevel . 2)
			       (org-agenda-files :maxlevel . 2))
	  org-outline-path-complete-in-steps nil
	  org-refile-use-outline-path t)


    (org-babel-do-load-languages
     'org-babel-load-languages
     '((gnuplot . t)
       (python . t)
       (latex . t))))
#+END_SRC

** Citations

Use ~org-ref~ to handle citations/references. Also add a ~shortcite~
link, which is used by conferences that use ACL-like styles.

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :init
    :after org
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     :keymaps 'bibtex-mode-map
     "mh" '(org-ref-bibtex-hydra/body :which-key "BibTeX hydra"))
    :config
    (setq org-ref-default-bibliography '("~/git/papers/references.bib")
	  org-ref-pdf-directory "~/git/papers/"
	  org-ref-bibliography-notes "~/git/org/literature.org")
    (org-ref-define-citation-link "shortcite" ?z))
#+END_SRC

** Evil

Set up compatibility with evil.

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :diminish evil-org-mode
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme '(todo))))
    :diminish evil-org-mode)
#+END_SRC

** Bullets

I like numbered headers/bullets. Use the ~org-bullets~ package to use
unicode numbered bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("â " "â¡" "â¢ " "â£" "â¤" "â¥" "â¦" "â§" "â¨" "â©" "âª" "â«" "â¬" "â­" "â®")))
#+END_SRC

** Identifier generation

Automatically generate identifiers when linking.

#+BEGIN_SRC emacs-lisp
  (use-package org-id
    :ensure org
    :after org
    :config
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

    ;; https://emacs.stackexchange.com/questions/12391/insert-org-id-link-at-point-via-outline-path-completion/12434#12434
    (defun org-id-complete-link (&optional arg)
      "Create an id: link using completion"
      (concat "id:"
	      (org-id-get-with-outline-path-completion)))
    (org-link-set-parameters "id" :complete 'org-id-complete-link))
#+END_SRC

* Programming languages
** Company

Use ~company~ for completion.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :init (company-mode))
#+END_SRC
** Flycheck
~flycheck~ provides online syntax checking.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :diminish flycheck-mode)
#+END_SRC

** Rust

Load ~rust-mode~ to make editing Rust code more comfortable.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :mode "\\.rs\\'")
#+END_SRC

Use ~racer~ for completions.

#+BEGIN_SRC emacs-lisp
  (use-package racer
    :ensure t
    :after rust-mode
    :diminish racer-mode
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode)
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t))
#+END_SRC

~flycheck-rust~ provides online syntax checking.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :after rust-mode
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

Use the ~cargo~ minor mode for compilation. The keybindings
are culled from Spacemacs.

#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :ensure t
    :general
    (:states '(normal motion emacs)
     :keymaps 'rust-mode-map
     :prefix "SPC"
     "mc." '(cargo-process-repeat)
     "mcC" '(cargo-process-clean)
     "mcX" '(cargo-process-run-example)
     "mcc" '(cargo-process-build)
     "mcd" '(cargo-process-doc)
     "mce" '(cargo-process-bench)
     "mcf" '(cargo-process-current-test)
     "mcf" '(cargo-process-fmt)
     "mci" '(cargo-process-init)
     "mcn" '(cargo-process-new)
     "mco" '(cargo-process-current-file-tests)
     "mcs" '(cargo-process-search)
     "mcu" '(cargo-process-update)
     "mcx" '(cargo-process-run)
     "mt"  '(cargo-process-test)))
#+END_SRC

** Go

Set up ~go-mode~ for syntax highlighting, fontification, etc:

#+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :ensure t
      :mode "\\.go\\'"
      :init
      (add-hook 'before-save-hook #'gofmt-before-save)
      (add-hook 'go-mode-hook (lambda ()
				(set (make-local-variable 'company-backends) '(company-go))
				(company-mode))))
#+END_SRC

Add Go completion using company:

#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t
    :after go-mode)
#+END_SRC

* Markup languages
** Markdown

Use ~markdown-mode~ for highlighting Markdown files.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

* TeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . TeX-latex-mode)

    :config
    (use-package latex
      :defer t
      :config
      (use-package preview)
      (add-hook 'LaTeX-mode-hook 'reftex-mode)))

#+END_SRC

* macOS

#+BEGIN_SRC emacs-lisp
(defun danieldk/system-is-mac ()
  (eq system-type 'darwin))
#+END_SRC

** pbcopy

~pbcopy~ enables the Emacs kill-ring to interact with the clipboard.

#+BEGIN_SRC emacs-lisp
  (when (danieldk/system-is-mac)
    (use-package pbcopy
      :ensure t))

#+END_SRC

** dictionary

macOS dictionary lookups

#+BEGIN_SRC emacs-lisp
  (when (danieldk/system-is-mac)
    (use-package osx-dictionary
      :ensure t
      :general
      (:states '(normal motion emacs)
       :prefix "SPC"
       "aw" '(osx-dictionary-search-word-at-point :which-key "dictionary"))
      (:states '(normal motion emacs)
       :keymaps '(osx-dictionary-mode-map)
       "q" 'osx-dictionary-quit
       "r" 'osx-dictionary-read-word
       "s" 'osx-dictionary-search-input
       "o" 'osx-dictionary-open-dictionary.app)
      ;;:config
      ;;(define-key osx-dictionary-mode-map (kbd "q") 'osx-dictionary-quit)
      ;;(define-key osx-dictionary-mode-map (kbd "r") 'osx-dictionary-read-word)
      ;;(define-key osx-dictionary-mode-map (kbd "s") 'osx-dictionary-search-input)
      ;;(define-key osx-dictionary-mode-map (kbd "o") 'osx-dictionary-open-dictionary.app)
      ))
#+END_SRC

* Miscelaneous
** Workspaces

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :init
    (eyebrowse-mode t)
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "l"  '(:ignore t :which-key "layout")
     "l0"     '(eyebrowse-switch-to-window-config-0 :which-key "config 0")
     "l1"     '(eyebrowse-switch-to-window-config-1 :which-key "config 1")
     "l2"     '(eyebrowse-switch-to-window-config-2 :which-key "config 2")
     "l3"     '(eyebrowse-switch-to-window-config-3 :which-key "config 3")
     "l4"     '(eyebrowse-switch-to-window-config-4 :which-key "config 4")
     "l5"     '(eyebrowse-switch-to-window-config-5 :which-key "config 5")
     "l6"     '(eyebrowse-switch-to-window-config-6 :which-key "config 6")
     "l7"     '(eyebrowse-switch-to-window-config-7 :which-key "config 7")
     "l8"     '(eyebrowse-switch-to-window-config-8 :which-key "config 8")
     "l9"     '(eyebrowse-switch-to-window-config-9 :which-key "config 9")
     "l<tab>" '(eyebrowse-last-window-config :which-key "last")
     "ld"     '(eyebrowse-close-window-config :which-key "close")
     "ln"     '(eyebrowse-next-window-config :which-key "next")
     "lp"     '(eyebrowse-previous-window-config :which-key "previous")
     "lw"     '(eyebrowse-switch-to-window-config :which-key "switch")
     "lt"     '(eyebrowse-rename-window-config :which-key "tag"))
    :config
    (eyebrowse-setup-opinionated-keys)
    (setq eyebrowse-mode-line-separator " "
	  eyebrowse-new-workspace t)
    :diminish eyebrowse-mode)
#+END_SRC
** File browsing (ranger)

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "ar" '(ranger :which-key "ranger")
     "ad" '(deer :which-key "deer"))
    :config
    (ranger-override-dired-mode t))
#+END_SRC

** Projects

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "p"  '(:ignore t :which-key "Project")
     "pf" '(projectile-find-file :which-key "Find in project")
     "pl" '(projectile-switch-project :which-key "Switch project"))
    :config
    (projectile-mode 1)
    (progn
      (setq projectile-enable-caching t)
      (setq projectile-require-project-root nil)
      (setq projectile-completion-system 'ivy)
      (add-to-list 'projectile-globally-ignored-files ".DS_Store"))

    :diminish projectile-mode)
#+END_SRC

** Rainbow delimiters

Rainbow delimiters colors delimiters such as parentheses, so that it
is easy to see if they line up.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :diminish rainbow-mode
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/git/papers/references.bib"))
#+END_SRC

** Line and column numbers

I like to see what line/column I am in in the status bar.

#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t
	column-number-mode t)
#+END_SRC

** Relative line numbers

Use relative line numbers to ease evil operations. ~nlinum-relative~
only recomputes line numbers when Emacs is idle, speeding up line
numbering in large files.

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :config
    (nlinum-relative-setup-evil)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    (add-hook 'org-mode-hook 'nlinum-relative-mode))
#+END_SRC
** E-Mail

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")

  (use-package mu4e
    :general
    (:states '(normal motion emacs)
     :prefix "SPC"
     "am" '(mu4e :which-key "mu4e"))
    (:states  '(normal motion emacs)
     :keymaps '(mu4e-headers-mode-map mu4e-view-mode-map)
     :prefix "SPC"
     "mr" '(mu4e-headers-toggle-include-related :which-key "related")
     "mt" '(mu4e-headers-toggle-threading :which-key "threading"))
    :config
    (setq mu4e-drafts-folder  "/Drafts"
	  mu4e-trash-folder  "/Trash"
	  mu4e-sent-folder   "/Sent Items"
	  mu4e-sent-messages-behavior 'delete
	  mu4e-refile-folder "/Archive"

	  mu4e-get-mail-command "mbsync -a"
	  mu4e-change-filenames-when-moving t
	  mu4e-context-policy 'pick-first
	  mu4e-view-show-addresses t
	  mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout"
	  mu4e-contexts `( ,(make-mu4e-context
			     :name "Home"
			     :enter-func (lambda () (mu4e-message "Entering Home context"))
			     :leave-func (lambda () (mu4e-message "Leaving Home context"))
			     ;; we match based on the contact-fields of the message
			     :match-func (lambda (msg)
					   (when msg
					     (mu4e-message-contact-field-matches msg
										 :to "me@danieldk.eu")))
			     :vars '( ( user-mail-address      . "me@danieldk.eu"  )
				      ( user-full-name         . "DaniÃ«l de Kok" )
				      ( mu4e-compose-signature . nil)))
			   ,(make-mu4e-context
			     :name "Work"
			     :enter-func (lambda () (mu4e-message "Switch to the Work context"))
			     :match-func (lambda (msg)
					   (when msg
					     (mu4e-message-contact-field-matches msg
										 :to "daniel.de-kok@uni-tuebingen.de")))
			     :vars '( ( user-mail-address       . "daniel.de-kok@uni-tuebingen.de" )
				      ( user-full-name          . "DaniÃ«l de Kok" )
				      ( mu4e-compose-signature  . nil))))

	  mu4e-bookmarks `( ,(make-mu4e-bookmark
			      :name  "Unread messages"
			      :query "flag:unread AND NOT flag:trashed"
			      :key ?u)
			    ,(make-mu4e-bookmark
			      :name "Today's messages"
			      :query "date:today..now"
			      :key ?t)
			    ,(make-mu4e-bookmark
			      :name "Last 7 days"
			      :query "date:7d..now"
			      :key ?w)
			    ,(make-mu4e-bookmark
			      :name "Messages with images"
			      :query "mime:image/*"
			      :key ?p)
			    ,(make-mu4e-bookmark
			      :name "SFB833"
			      :query "from:sfb*"
			      :key ?s))))
#+END_SRC

Use Evil keybindings:

#+BEGIN_SRC emacs-lisp
  (use-package evil-mu4e
    :ensure t
    :after mu4e)
#+END_SRC

Use ~msmtp~ for delivering mail.

#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function 'message-send-mail-with-sendmail
	sendmail-program "/usr/local/bin/msmtp"
	message-sendmail-f-is-evil 't
	user-mail-address "daniel.de-kok@uni-tuebingen.de")
#+END_SRC

Allow linking between mu4e and org-mode:

#+BEGIN_SRC emacs-lisp
  (use-package org-mu4e
    :after org
    :general
    (:states '(normal motion emacs)
     :keymaps '(mu4e-headers-mode-map mu4e-view-mode-map)
     :prefix "SPC"
     "ml" '(org-store-link)))
#+END_SRC
** RSS feeds

Use elfeed for reading RSS feeds.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :general
    (:states '(normal motion emacs)
	     :prefix "SPC"
     "af" '(elfeed :which-key "elfeed"))
    (:states '(normal motion)
     :keymaps 'elfeed-search-mode-map
     "c"  'elfeed-db-compact
     "gr" 'elfeed-update
     "gR" 'elfeed-search-update--force
     "gu" 'elfeed-unjam
     "o"  'elfeed-load-opml
     "q"  'quit-window
     "w"  'elfeed-web-start
     "W"  'elfeed-web-stop
     (kbd "RET") 'elfeed-search-show-entry)
    (:states '(normal motion)
     :keymaps 'elfeed-show-mode-map
     "q" 'quit-window
     (kbd "C-j") 'elfeed-show-next
     (kbd "C-k") 'elfeed-show-prev))

#+END_SRC

Manage feeds using an org-mode file.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :after elfeed
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/git/org/feeds.org")))
#+END_SRC

** Silence is golden

Change /yes-no/ prompts to /y-n/ prompts:

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Diminish some modes:

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :diminish auto-revert-mode)

  (use-package undo-tree
    :diminish undo-tree-mode)

  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
